#-----------------------------------------------------------------------------------------------------------------------
# CONFIGURATION
#-----------------------------------------------------------------------------------------------------------------------
variables:
  BUILD_ARTIFACTS_EXPIRY: "1 hour"
  BUILD_COMPOSER_VERSION: "2.5"
  BUILD_NODE_VERSION: "16"
  TEST_CODECEPTION_ARTIFACTS_EXPIRY: "1 day"

#-----------------------------------------------------------------------------------------------------------------------
# ANALYSE
#-----------------------------------------------------------------------------------------------------------------------
.base-analyse:
  stage: analyse
  except:
    - schedules
    - pipelines
    - tags

#-----------------------------------------------------------------------------------------------------------------------
# BUILD
#-----------------------------------------------------------------------------------------------------------------------
.base-build:
  stage: build
  allow_failure: false
  except:
    - schedules
    - pipelines
    - tags
  artifacts:
    when: on_success
    expire_in: ${BUILD_ARTIFACTS_EXPIRY}
    untracked: true

#-----------------------------------------------------------------------------------------------------------------------
# DEPLOY
#-----------------------------------------------------------------------------------------------------------------------
.base-deploy:
  variables:
    COMPOSER_CACHE_DIR: '${CI_PROJECT_DIR}/.composer'
  except:
    - schedules
    - pipelines

.base-deploy-feature:
  stage: deploy.feature
  resource_group: $CI_COMMIT_REF_NAME
  environment:
    name: $CI_COMMIT_REF_NAME
    url: $ENVIRONMENT_URL

.feature-branches:
  only:
    - /^release-(.*)/
    - /^feature-.*$/
    - main
  variables:
    SSH_USER: ${SSH_USER_STAGE}
    SSH_HOST: ${SSH_HOST_STAGE}

#-----------------------------------------------------------------------------------------------------------------------
# SCHEDULE
#-----------------------------------------------------------------------------------------------------------------------
.base-schedule:
  rules:
    - if: $CI_TASK == "${SCHEDULE_TASK_NAME}"
      when: always
    - when: never


#-----------------------------------------------------------------------------------------------------------------------
# TEST
#-----------------------------------------------------------------------------------------------------------------------
.base-test:
  stage: test


#-----------------------------------------------------------------------------------------------------------------------
# SSH
#-----------------------------------------------------------------------------------------------------------------------
.ssh:
  before_script:
    - DATE=`date +%s`
    - TITLE="Install SSH Key"
    - echo -e "\e[0Ksection_start:${DATE}:${DATE}[collapsed=true]\r\e[0K\033[1;96m${TITLE}\033[m"

      ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    - type ssh-agent 2> /dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
      ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
      ## We're using tr to fix line endings which makes ed25519 keys work
      ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "${SSH_KEY}" | tr -d ' ' | base64 -d > ~/.ssh/id_rsa
    - touch ~/.ssh/config
    - chmod 700 -R ~/.ssh
      ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
      ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    - ssh-keyscan ${SSH_HOST} >> ~/.ssh/known_hosts
    - echo "${SSH_HOST}" >> /etc/hosts
    - echo -e "Host *\n\tStrictHostKeyChecking yes\n\tUserKnownHostsFile=~/.ssh/known_hosts\n\n" > ~/.ssh/config
    - echo -e "\e[0Ksection_end:`date +%s`:${DATE}\r\e[0K"